package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import com.qualcomm.robotcore.hardware.Servo;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;

@TeleOp
public class TeleOp1 extends LinearOpMode {

  private DcMotor backLeft;
  private DcMotor backRight;
  private DcMotor frontLeft;
  private DcMotor frontRight;
  private Servo clawLeft;
  private Servo clawRight;
  private Servo clawWrist;
  private DcMotor Lift;
  private DistanceSensor distanceR;
  
  /*private double liftPos;
  private double armPos;
  private double speed;
  private boolean clawOpen;*/

  /**
   * This function is executed when this Op Mode is selected from the Driver Station.
   */
  @Override
  public void runOpMode() {
    double liftPos = 0;
    double armPos = 0;
    double speed = 0;
    boolean clawOpen = false;

    backLeft = hardwareMap.get(DcMotor.class, "backLeft");
    backRight = hardwareMap.get(DcMotor.class, "backRight");
    frontLeft = hardwareMap.get(DcMotor.class, "frontLeft");
    frontRight = hardwareMap.get(DcMotor.class, "frontRight");
    clawLeft = hardwareMap.get(Servo.class, "clawLeft");
    clawRight = hardwareMap.get(Servo.class, "clawRight");
    clawWrist = hardwareMap.get(Servo.class, "clawWrist");
    Lift = hardwareMap.get(DcMotor.class, "Lift");
    //distanceR = hardwareMap.get(DistanceSensor.class, "distanceR");

    // Put initialization blocks here.
    backLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    backRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    frontLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    frontRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    clawLeft.setDirection(Servo.Direction.REVERSE);
    clawRight.setDirection(Servo.Direction.REVERSE);
    //clawRight.setDirection(Servo.Direction.FORWARD);
    armPos = 0.1;
    clawWrist.scaleRange(0, 0.4);
    backLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    backRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    frontLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    frontRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    Lift.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    //clawRight.setPosition(-0.2);
    //clawLeft.setPosition(0.5);
    Lift.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    telemetry.addData("claw", "closed");
    waitForStart();
    if (opModeIsActive()) {
      // Put run blocks here.
      while (opModeIsActive()) {
        // Put loop blocks here.
        //telemetry.addData("distanceR", distanceR.getDistance(DistanceUnit.CM));
        if (gamepad1.left_trigger > 0) {
          speed = 1;
        } else if (gamepad1.right_trigger > 0) {
          speed = 0.25;
        } else {
          speed = 0.5;
        }
        frontRight.setPower(speed * ((-gamepad1.left_stick_y - gamepad1.left_stick_x) - gamepad1.right_stick_x));
        frontLeft.setPower(speed * ((gamepad1.left_stick_y - gamepad1.left_stick_x) - gamepad1.right_stick_x));
        backRight.setPower(speed * ((-gamepad1.left_stick_y + gamepad1.left_stick_x) - gamepad1.right_stick_x));
        backLeft.setPower(speed * ((gamepad1.left_stick_y + gamepad1.left_stick_x) - gamepad1.right_stick_x));
        if (gamepad2.a) {
          clawOpen = true;
        } else if (gamepad2.b) {
          clawOpen = false;
        }
        if (clawOpen) {
          clawRight.setPosition(0);
          clawLeft.setPosition(0);
          telemetry.addData("claw", "closed");
        } else {
          clawRight.setPosition(0.2);
          clawLeft.setPosition(0.2);
          telemetry.addData("claw", "open");
        }
        armPos += gamepad2.left_stick_y / 20;
        armPos = Math.min(Math.max(armPos, 0), 1);
        liftPos += gamepad2.right_stick_y * -75;
        liftPos = Math.min(Math.max(liftPos, 0), 3150);
        Lift.setTargetPosition((int) liftPos);
        Lift.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        Lift.setPower(liftPos - Lift.getCurrentPosition());
        clawWrist.setPosition(armPos);
        telemetry.addData("liftPos", Lift.getCurrentPosition());
        telemetry.addData("armPos", armPos);
        telemetry.update();
      }
    }
  }
}
